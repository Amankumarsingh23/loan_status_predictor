# -*- coding: utf-8 -*-
"""Loan status prediction .ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Bdb8I4CfEsQQ_4t5HBNDEJg-OvUGlaJD

Importing the dependencies
"""

import numpy as np
import pandas as pd
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn import svm
import kagglehub
from sklearn.metrics import accuracy_score

"""Data collection and data preprocessing"""

from pickle import load
#loading the dataset to pandas dataset
path = kagglehub.dataset_download("ninzaami/loan-predication")

import os

# Find the CSV file in the downloaded directory
csv_file = [f for f in os.listdir(path) if f.endswith('.csv')][0]
csv_path = os.path.join(path, csv_file)

# Load the dataset to pandas dataset
loan_dataset = pd.read_csv(csv_path)

type(loan_dataset)

loan_dataset.head()

#  no of rows and columns
loan_dataset.shape

#statistical measeures
loan_dataset.describe()

# dropping the missing values
loan_dataset = loan_dataset.dropna()

# no of missing values in each columns
loan_dataset.isnull().sum()

# label encoding
loan_dataset.replace({"Loan_Status":{'N':0,'Y':1}},inplace=True)

loan_dataset.head()

#Dependent column values
loan_dataset['Dependents'].value_counts()

#replacing the value of 3+ as 4

loan_dataset = loan_dataset.replace(to_replace='3+',value=4)

#dependent values
loan_dataset['Dependents'].value_counts()

"""Data visualisation"""

# education and loan status
sns.countplot(x='Education',hue='Loan_Status',data=loan_dataset)

#martial status and loan status
sns.countplot(x='Married',hue='Loan_Status',data=loan_dataset)

#convert categorical columns to numerical valaues
loan_dataset.replace({'Married':{'No':0,'Yes':1},'Gender':{'Male':1,'Female':0},'Self_Employed':{'No':0,'Yes':1},'Education':{'Graduate':1,'Not Graduate':0},'Property_Area':{'Rural':0,'Semiurban':1,'Urban':2}} ,inplace=True)



pd.set_option('future.no_silent_downcasting', True)

loan_dataset.head()

#separating the data and the label
X=loan_dataset.drop(columns=['Loan_ID','Loan_Status'],axis=1)
Y=loan_dataset['Loan_Status']

print(Y)

x_train, x_test, y_train, y_test = train_test_split(X, Y, test_size=0.1,stratify=Y, random_state=2)

print(x_train.shape, x_test.shape, y_train.shape, y_test.shape)

"""Training the model


support vector model
"""

classifier = svm.SVC(kernel='linear')

#training the support vector model
classifier.fit(x_train,y_train)

#accuracy score on training data
x_train_prediction = classifier.predict(x_train)
training_data_accuracy = accuracy_score(x_train_prediction,y_train)

print('Accuracy on training data : ',training_data_accuracy)

#accuracy score on test data
x_test_prediction = classifier.predict(x_test)
test_data_accuracy = accuracy_score(x_test_prediction,y_test)

print('Accuracy on test data : ',test_data_accuracy)

#making a predictive system
input_data= (1.0,1.0,0,1,1.0,0,0.0,9966.0,90807360.0,1.0,2)
#changing the input data to a numpy array
input_data_as_numpy_array= np.asarray(input_data)

#reshape the np array as we are predicting for one instance
input_data_reshaped= input_data_as_numpy_array.reshape(1,-1)

prediction = classifier.predict(input_data_reshaped)
print(prediction)

if (prediction[0]==0):
  print('The loan is not approved')
else:
  print('The loan is approved')

